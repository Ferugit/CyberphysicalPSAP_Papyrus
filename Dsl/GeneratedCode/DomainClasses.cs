//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass MyIoTDSLAF2Model
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2Model.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2Model.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("92e4863e-d343-4d7c-96b6-d67baa3c0d4b")]
	public partial class MyIoTDSLAF2Model : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyIoTDSLAF2Model domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92e4863e, 0xd343, 0x4d7c, 0x96, 0xb6, 0xd6, 0x7b, 0xaa, 0x3c, 0x0d, 0x4b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyIoTDSLAF2Model(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyIoTDSLAF2Model(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x16f4c32d, 0x0a04, 0x4e00, 0x8f, 0xbb, 0x99, 0xed, 0x10, 0x68, 0x57, 0x79);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2Model.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2Model/Name.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2Model/Name.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("16f4c32d-0a04-4e00-8fbb-99ed10685779")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyIoTDSLAF2Model.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyIoTDSLAF2Model, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyIoTDSLAF2Model.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyIoTDSLAF2Model.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyIoTDSLAF2Model element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyIoTDSLAF2Model element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoTDevice opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IoTDevice.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.MyIoTDSLAF2Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IoTDevice> IoTDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IoTDevice>, IoTDevice>(global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.MyIoTDSLAF2ModelDomainRoleId);
			}
		}
		#endregion
		#region Measurement opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Measurement.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MyIoTDSLAF2Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Measurement> Measurement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Measurement>, Measurement>(global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MyIoTDSLAF2ModelDomainRoleId);
			}
		}
		#endregion
		#region Action opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Action.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.MyIoTDSLAF2Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Action> Action
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Action>, Action>(global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.MyIoTDSLAF2ModelDomainRoleId);
			}
		}
		#endregion
		#region Alarm opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Alarm.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.MyIoTDSLAF2Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Alarm> Alarm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Alarm>, Alarm>(global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.MyIoTDSLAF2ModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM.IoT_DSL_AF2.IoTDevice.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM.IoT_DSL_AF2.Measurement.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM.IoT_DSL_AF2.Action.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM.IoT_DSL_AF2.Alarm.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM.IoT_DSL_AF2.IoTDevice sourceIoTDevice1 = sourceElement as global::UPM.IoT_DSL_AF2.IoTDevice;
			if (sourceIoTDevice1 != null)
			{
				// Create link for path MyIoTDSLAF2ModelHasIoTDevice.IoTDevice
				this.IoTDevice.Add(sourceIoTDevice1);

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Measurement sourceMeasurement2 = sourceElement as global::UPM.IoT_DSL_AF2.Measurement;
			if (sourceMeasurement2 != null)
			{
				// Create link for path MyIoTDSLAF2ModelHasMeasurement.Measurement
				this.Measurement.Add(sourceMeasurement2);

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Action sourceAction3 = sourceElement as global::UPM.IoT_DSL_AF2.Action;
			if (sourceAction3 != null)
			{
				// Create link for path MyIoTDSLAF2ModelHasAction.Action
				this.Action.Add(sourceAction3);

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Alarm sourceAlarm4 = sourceElement as global::UPM.IoT_DSL_AF2.Alarm;
			if (sourceAlarm4 != null)
			{
				// Create link for path MyIoTDSLAF2ModelHasAlarm.Alarm
				this.Alarm.Add(sourceAlarm4);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM.IoT_DSL_AF2.IoTDevice sourceIoTDevice1 = sourceElement as global::UPM.IoT_DSL_AF2.IoTDevice;
			if (sourceIoTDevice1 != null)
			{
				// Delete link for path MyIoTDSLAF2ModelHasIoTDevice.IoTDevice
				
				foreach (DslModeling::ElementLink link in global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.GetLinks((global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model)this, sourceIoTDevice1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.MyIoTDSLAF2ModelDomainRoleId, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.IoTDeviceDomainRoleId);
				}

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Measurement sourceMeasurement2 = sourceElement as global::UPM.IoT_DSL_AF2.Measurement;
			if (sourceMeasurement2 != null)
			{
				// Delete link for path MyIoTDSLAF2ModelHasMeasurement.Measurement
				
				foreach (DslModeling::ElementLink link in global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.GetLinks((global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model)this, sourceMeasurement2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MyIoTDSLAF2ModelDomainRoleId, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MeasurementDomainRoleId);
				}

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Action sourceAction3 = sourceElement as global::UPM.IoT_DSL_AF2.Action;
			if (sourceAction3 != null)
			{
				// Delete link for path MyIoTDSLAF2ModelHasAction.Action
				
				foreach (DslModeling::ElementLink link in global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.GetLinks((global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model)this, sourceAction3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.MyIoTDSLAF2ModelDomainRoleId, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.ActionDomainRoleId);
				}

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Alarm sourceAlarm4 = sourceElement as global::UPM.IoT_DSL_AF2.Alarm;
			if (sourceAlarm4 != null)
			{
				// Delete link for path MyIoTDSLAF2ModelHasAlarm.Alarm
				
				foreach (DslModeling::ElementLink link in global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.GetLinks((global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model)this, sourceAlarm4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.MyIoTDSLAF2ModelDomainRoleId, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.AlarmDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Controller
	/// Description for UPM.IoT_DSL_AF2.Controller
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Controller.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Controller.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d5e80517-d4a3-422f-a808-4a013b3f2f7d")]
	public partial class Controller : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Controller domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd5e80517, 0xd4a3, 0x422f, 0xa8, 0x08, 0x4a, 0x01, 0x3b, 0x3f, 0x2f, 0x7d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Controller(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Controller(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Identifier domain property code
		
		/// <summary>
		/// Identifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentifierDomainPropertyId = new global::System.Guid(0xc10fe0b9, 0xa844, 0x43ef, 0x80, 0xd2, 0xe4, 0x72, 0xfb, 0x34, 0x82, 0x1f);
		
		/// <summary>
		/// Storage for Identifier
		/// </summary>
		private global::System.Int32 identifierPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Identifier domain property.
		/// Description for UPM.IoT_DSL_AF2.Controller.Identifier
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Controller/Identifier.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Controller/Identifier.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c10fe0b9-a844-43ef-80d2-e472fb34821f")]
		public global::System.Int32 Identifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return identifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdentifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Controller.Identifier domain property.
		/// </summary>
		internal sealed partial class IdentifierPropertyHandler : DslModeling::DomainPropertyValueHandler<Controller, global::System.Int32>
		{
			private IdentifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Controller.Identifier domain property value handler.
			/// </summary>
			public static readonly IdentifierPropertyHandler Instance = new IdentifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Controller.Identifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Controller element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.identifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Controller element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.identifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoTDevice opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTDevice.
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasController.Controller
		/// </summary>
		public virtual IoTDevice IoTDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.IoTDeviceHasController.ControllerDomainRoleId) as IoTDevice;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.IoTDeviceHasController.ControllerDomainRoleId, value);
			}
		}
		#endregion
		#region Sensor opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensor.
		/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsSensor.Controller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor.ControllerDomainRoleId);
			}
		}
		#endregion
		#region Actuator opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actuator.
		/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsActuator.Controller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actuator> Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actuator>, Actuator>(global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator.ControllerDomainRoleId);
			}
		}
		#endregion
		#region Alarm opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Alarm.
		/// Description for UPM.IoT_DSL_AF2.ControllerTriggersAlarm.Controller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Alarm> Alarm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Alarm>, Alarm>(global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm.ControllerDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass IoTDevice
	/// Description for UPM.IoT_DSL_AF2.IoTDevice
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDevice.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDevice.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e622aeab-d023-4ade-8867-430f8f98d94a")]
	public partial class IoTDevice : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IoTDevice domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe622aeab, 0xd023, 0x4ade, 0x88, 0x67, 0x43, 0x0f, 0x8f, 0x98, 0xd9, 0x4a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoTDevice(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoTDevice(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Identifier domain property code
		
		/// <summary>
		/// Identifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentifierDomainPropertyId = new global::System.Guid(0x23d07e4c, 0xbbea, 0x4335, 0xb7, 0x01, 0x98, 0xee, 0xc8, 0x13, 0x4d, 0x28);
		
		/// <summary>
		/// Storage for Identifier
		/// </summary>
		private global::System.Int32 identifierPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Identifier domain property.
		/// Description for UPM.IoT_DSL_AF2.IoTDevice.Identifier
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDevice/Identifier.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDevice/Identifier.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("23d07e4c-bbea-4335-b701-98eec8134d28")]
		public global::System.Int32 Identifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return identifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdentifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IoTDevice.Identifier domain property.
		/// </summary>
		internal sealed partial class IdentifierPropertyHandler : DslModeling::DomainPropertyValueHandler<IoTDevice, global::System.Int32>
		{
			private IdentifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IoTDevice.Identifier domain property value handler.
			/// </summary>
			public static readonly IdentifierPropertyHandler Instance = new IdentifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IoTDevice.Identifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(IoTDevice element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.identifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IoTDevice element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.identifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Location domain property code
		
		/// <summary>
		/// Location domain property Id.
		/// </summary>
		public static readonly global::System.Guid LocationDomainPropertyId = new global::System.Guid(0xf719e6c5, 0x9124, 0x47ae, 0xb2, 0x26, 0x02, 0x89, 0x10, 0xe8, 0x0f, 0xc4);
		
		/// <summary>
		/// Storage for Location
		/// </summary>
		private global::System.String locationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Location domain property.
		/// Description for UPM.IoT_DSL_AF2.IoTDevice.Location
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDevice/Location.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDevice/Location.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f719e6c5-9124-47ae-b226-028910e80fc4")]
		public global::System.String Location
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return locationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IoTDevice.Location domain property.
		/// </summary>
		internal sealed partial class LocationPropertyHandler : DslModeling::DomainPropertyValueHandler<IoTDevice, global::System.String>
		{
			private LocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IoTDevice.Location domain property value handler.
			/// </summary>
			public static readonly LocationPropertyHandler Instance = new LocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IoTDevice.Location domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IoTDevice element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.locationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IoTDevice element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.locationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x13228199, 0x913a, 0x4254, 0x98, 0x9c, 0x6a, 0xeb, 0xbe, 0xa0, 0xc7, 0xad);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM.IoT_DSL_AF2.IoTDevice.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDevice/Name.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDevice/Name.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("13228199-913a-4254-989c-6aebbea0c7ad")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IoTDevice.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<IoTDevice, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IoTDevice.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IoTDevice.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IoTDevice element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IoTDevice element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyIoTDSLAF2Model opposite domain role accessor
		/// <summary>
		/// Gets or sets MyIoTDSLAF2Model.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.IoTDevice
		/// </summary>
		public virtual MyIoTDSLAF2Model MyIoTDSLAF2Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.IoTDeviceDomainRoleId) as MyIoTDSLAF2Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.IoTDeviceDomainRoleId, value);
			}
		}
		#endregion
		#region Controller opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Controller.
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasController.IoTDevice
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Controller> Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(global::UPM.IoT_DSL_AF2.IoTDeviceHasController.IoTDeviceDomainRoleId);
			}
		}
		#endregion
		#region Sensor opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensor.
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasSensor.IoTDevice
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.IoTDeviceDomainRoleId);
			}
		}
		#endregion
		#region Actuator opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actuator.
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasActuator.IoTDevice
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actuator> Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actuator>, Actuator>(global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.IoTDeviceDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM.IoT_DSL_AF2.Controller.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM.IoT_DSL_AF2.Sensor.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM.IoT_DSL_AF2.Actuator.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM.IoT_DSL_AF2.Controller sourceController1 = sourceElement as global::UPM.IoT_DSL_AF2.Controller;
			if (sourceController1 != null)
			{
				// Create link for path IoTDeviceHasController.Controller
				this.Controller.Add(sourceController1);

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Sensor sourceSensor2 = sourceElement as global::UPM.IoT_DSL_AF2.Sensor;
			if (sourceSensor2 != null)
			{
				// Create link for path IoTDeviceHasSensor.Sensor
				this.Sensor.Add(sourceSensor2);

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Actuator sourceActuator3 = sourceElement as global::UPM.IoT_DSL_AF2.Actuator;
			if (sourceActuator3 != null)
			{
				// Create link for path IoTDeviceHasActuator.Actuator
				this.Actuator.Add(sourceActuator3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM.IoT_DSL_AF2.Controller sourceController1 = sourceElement as global::UPM.IoT_DSL_AF2.Controller;
			if (sourceController1 != null)
			{
				// Delete link for path IoTDeviceHasController.Controller
				
				foreach (DslModeling::ElementLink link in global::UPM.IoT_DSL_AF2.IoTDeviceHasController.GetLinks((global::UPM.IoT_DSL_AF2.IoTDevice)this, sourceController1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM.IoT_DSL_AF2.IoTDeviceHasController.IoTDeviceDomainRoleId, global::UPM.IoT_DSL_AF2.IoTDeviceHasController.ControllerDomainRoleId);
				}

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Sensor sourceSensor2 = sourceElement as global::UPM.IoT_DSL_AF2.Sensor;
			if (sourceSensor2 != null)
			{
				// Delete link for path IoTDeviceHasSensor.Sensor
				
				foreach (DslModeling::ElementLink link in global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.GetLinks((global::UPM.IoT_DSL_AF2.IoTDevice)this, sourceSensor2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.IoTDeviceDomainRoleId, global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.SensorDomainRoleId);
				}

				return;
			}
				
			global::UPM.IoT_DSL_AF2.Actuator sourceActuator3 = sourceElement as global::UPM.IoT_DSL_AF2.Actuator;
			if (sourceActuator3 != null)
			{
				// Delete link for path IoTDeviceHasActuator.Actuator
				
				foreach (DslModeling::ElementLink link in global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.GetLinks((global::UPM.IoT_DSL_AF2.IoTDevice)this, sourceActuator3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.IoTDeviceDomainRoleId, global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.ActuatorDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Sensor
	/// Description for UPM.IoT_DSL_AF2.Sensor
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Sensor.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Sensor.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("17234e60-5a1c-456d-b68b-837bd9c706b0")]
	public partial class Sensor : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Sensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x17234e60, 0x5a1c, 0x456d, 0xb6, 0x8b, 0x83, 0x7b, 0xd9, 0xc7, 0x06, 0xb0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sensor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sensor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Identifier domain property code
		
		/// <summary>
		/// Identifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentifierDomainPropertyId = new global::System.Guid(0xfc83baba, 0xa596, 0x4db9, 0xaf, 0x2f, 0x92, 0x70, 0x99, 0x77, 0xfe, 0x66);
		
		/// <summary>
		/// Storage for Identifier
		/// </summary>
		private global::System.Int32 identifierPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Identifier domain property.
		/// Description for UPM.IoT_DSL_AF2.Sensor.Identifier
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Sensor/Identifier.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Sensor/Identifier.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fc83baba-a596-4db9-af2f-92709977fe66")]
		public global::System.Int32 Identifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return identifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdentifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sensor.Identifier domain property.
		/// </summary>
		internal sealed partial class IdentifierPropertyHandler : DslModeling::DomainPropertyValueHandler<Sensor, global::System.Int32>
		{
			private IdentifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sensor.Identifier domain property value handler.
			/// </summary>
			public static readonly IdentifierPropertyHandler Instance = new IdentifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sensor.Identifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Sensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.identifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sensor element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.identifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Controller opposite domain role accessor
		/// <summary>
		/// Gets or sets Controller.
		/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsSensor.Sensor
		/// </summary>
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor.SensorDomainRoleId) as Controller;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor.SensorDomainRoleId, value);
			}
		}
		#endregion
		#region IoTDevice opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTDevice.
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasSensor.Sensor
		/// </summary>
		public virtual IoTDevice IoTDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.SensorDomainRoleId) as IoTDevice;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.SensorDomainRoleId, value);
			}
		}
		#endregion
		#region Measurement opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Measurement.
		/// Description for UPM.IoT_DSL_AF2.SensorMonitorsMesurement.Sensor
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Measurement> Measurement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Measurement>, Measurement>(global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement.SensorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Measurement
	/// Description for UPM.IoT_DSL_AF2.Measurement
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Measurement.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Measurement.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2c9556fb-5b8e-4a3f-93c8-a5b44b64de8c")]
	public partial class Measurement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Measurement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2c9556fb, 0x5b8e, 0x4a3f, 0x93, 0xc8, 0xa5, 0xb4, 0x4b, 0x64, 0xde, 0x8c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Measurement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Measurement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Topic domain property code
		
		/// <summary>
		/// Topic domain property Id.
		/// </summary>
		public static readonly global::System.Guid TopicDomainPropertyId = new global::System.Guid(0x49587646, 0x97b9, 0x492d, 0x8b, 0x6f, 0x3f, 0x64, 0xcc, 0x73, 0x3a, 0x5d);
		
		/// <summary>
		/// Storage for Topic
		/// </summary>
		private global::System.String topicPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Topic domain property.
		/// Description for UPM.IoT_DSL_AF2.Measurement.Topic
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Measurement/Topic.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Measurement/Topic.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("49587646-97b9-492d-8b6f-3f64cc733a5d")]
		public global::System.String Topic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return topicPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TopicPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Measurement.Topic domain property.
		/// </summary>
		internal sealed partial class TopicPropertyHandler : DslModeling::DomainPropertyValueHandler<Measurement, global::System.String>
		{
			private TopicPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Measurement.Topic domain property value handler.
			/// </summary>
			public static readonly TopicPropertyHandler Instance = new TopicPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Measurement.Topic domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TopicDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Measurement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.topicPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Measurement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.topicPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Identifier domain property code
		
		/// <summary>
		/// Identifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentifierDomainPropertyId = new global::System.Guid(0x7eb08039, 0x6a5d, 0x4cdb, 0xa7, 0x1d, 0x19, 0xb4, 0x2b, 0x1a, 0x03, 0xdc);
		
		/// <summary>
		/// Storage for Identifier
		/// </summary>
		private global::System.Int32 identifierPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Identifier domain property.
		/// Description for UPM.IoT_DSL_AF2.Measurement.Identifier
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Measurement/Identifier.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Measurement/Identifier.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7eb08039-6a5d-4cdb-a71d-19b42b1a03dc")]
		public global::System.Int32 Identifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return identifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdentifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Measurement.Identifier domain property.
		/// </summary>
		internal sealed partial class IdentifierPropertyHandler : DslModeling::DomainPropertyValueHandler<Measurement, global::System.Int32>
		{
			private IdentifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Measurement.Identifier domain property value handler.
			/// </summary>
			public static readonly IdentifierPropertyHandler Instance = new IdentifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Measurement.Identifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Measurement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.identifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Measurement element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.identifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Date domain property code
		
		/// <summary>
		/// Date domain property Id.
		/// </summary>
		public static readonly global::System.Guid DateDomainPropertyId = new global::System.Guid(0x90f6232f, 0xdb4d, 0x4cdf, 0x89, 0xcb, 0xb4, 0x0d, 0x85, 0xb9, 0x6c, 0xf1);
		
		/// <summary>
		/// Storage for Date
		/// </summary>
		private global::System.Boolean datePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Date domain property.
		/// Description for UPM.IoT_DSL_AF2.Measurement.Date
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Measurement/Date.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Measurement/Date.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("90f6232f-db4d-4cdf-89cb-b40d85b96cf1")]
		public global::System.Boolean Date
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return datePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Measurement.Date domain property.
		/// </summary>
		internal sealed partial class DatePropertyHandler : DslModeling::DomainPropertyValueHandler<Measurement, global::System.Boolean>
		{
			private DatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Measurement.Date domain property value handler.
			/// </summary>
			public static readonly DatePropertyHandler Instance = new DatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Measurement.Date domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Measurement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.datePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Measurement element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.datePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Hour domain property code
		
		/// <summary>
		/// Hour domain property Id.
		/// </summary>
		public static readonly global::System.Guid HourDomainPropertyId = new global::System.Guid(0x98f45427, 0xf9fc, 0x47bf, 0x94, 0xc1, 0x9b, 0xb3, 0x06, 0x60, 0x3d, 0x14);
		
		/// <summary>
		/// Storage for Hour
		/// </summary>
		private global::System.Boolean hourPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Hour domain property.
		/// Description for UPM.IoT_DSL_AF2.Measurement.Hour
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Measurement/Hour.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Measurement/Hour.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("98f45427-f9fc-47bf-94c1-9bb306603d14")]
		public global::System.Boolean Hour
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hourPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HourPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Measurement.Hour domain property.
		/// </summary>
		internal sealed partial class HourPropertyHandler : DslModeling::DomainPropertyValueHandler<Measurement, global::System.Boolean>
		{
			private HourPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Measurement.Hour domain property value handler.
			/// </summary>
			public static readonly HourPropertyHandler Instance = new HourPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Measurement.Hour domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HourDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Measurement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hourPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Measurement element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hourPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Sensor opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensor.
		/// Description for UPM.IoT_DSL_AF2.SensorMonitorsMesurement.Measurement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement.MeasurementDomainRoleId);
			}
		}
		#endregion
		#region MyIoTDSLAF2Model opposite domain role accessor
		/// <summary>
		/// Gets or sets MyIoTDSLAF2Model.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.Measurement
		/// </summary>
		public virtual MyIoTDSLAF2Model MyIoTDSLAF2Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MeasurementDomainRoleId) as MyIoTDSLAF2Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MeasurementDomainRoleId, value);
			}
		}
		#endregion
		#region Values opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Values.
		/// Description for UPM.IoT_DSL_AF2.MeasurementHasValues.Measurement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Values> Values
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Values>, Values>(global::UPM.IoT_DSL_AF2.MeasurementHasValues.MeasurementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM.IoT_DSL_AF2.Values.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM.IoT_DSL_AF2.Values sourceValues1 = sourceElement as global::UPM.IoT_DSL_AF2.Values;
			if (sourceValues1 != null)
			{
				// Create link for path MeasurementHasValues.Values
				this.Values.Add(sourceValues1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM.IoT_DSL_AF2.Values sourceValues1 = sourceElement as global::UPM.IoT_DSL_AF2.Values;
			if (sourceValues1 != null)
			{
				// Delete link for path MeasurementHasValues.Values
				
				foreach (DslModeling::ElementLink link in global::UPM.IoT_DSL_AF2.MeasurementHasValues.GetLinks((global::UPM.IoT_DSL_AF2.Measurement)this, sourceValues1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM.IoT_DSL_AF2.MeasurementHasValues.MeasurementDomainRoleId, global::UPM.IoT_DSL_AF2.MeasurementHasValues.ValuesDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Actuator
	/// Description for UPM.IoT_DSL_AF2.Actuator
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Actuator.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Actuator.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c4645b1f-f0c6-4f68-abf9-372eb70283f4")]
	public partial class Actuator : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Actuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc4645b1f, 0xf0c6, 0x4f68, 0xab, 0xf9, 0x37, 0x2e, 0xb7, 0x02, 0x83, 0xf4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Actuator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Actuator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Identifier domain property code
		
		/// <summary>
		/// Identifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentifierDomainPropertyId = new global::System.Guid(0xf074bdff, 0x81aa, 0x499f, 0xa7, 0xa3, 0x04, 0xbf, 0xd4, 0x6b, 0xcd, 0x48);
		
		/// <summary>
		/// Storage for Identifier
		/// </summary>
		private global::System.Int32 identifierPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Identifier domain property.
		/// Description for UPM.IoT_DSL_AF2.Actuator.Identifier
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Actuator/Identifier.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Actuator/Identifier.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f074bdff-81aa-499f-a7a3-04bfd46bcd48")]
		public global::System.Int32 Identifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return identifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdentifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Actuator.Identifier domain property.
		/// </summary>
		internal sealed partial class IdentifierPropertyHandler : DslModeling::DomainPropertyValueHandler<Actuator, global::System.Int32>
		{
			private IdentifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Actuator.Identifier domain property value handler.
			/// </summary>
			public static readonly IdentifierPropertyHandler Instance = new IdentifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Actuator.Identifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Actuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.identifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Actuator element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.identifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoTDevice opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTDevice.
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasActuator.Actuator
		/// </summary>
		public virtual IoTDevice IoTDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.ActuatorDomainRoleId) as IoTDevice;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.ActuatorDomainRoleId, value);
			}
		}
		#endregion
		#region Controller opposite domain role accessor
		/// <summary>
		/// Gets or sets Controller.
		/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsActuator.Actuator
		/// </summary>
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator.ActuatorDomainRoleId) as Controller;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator.ActuatorDomainRoleId, value);
			}
		}
		#endregion
		#region Action opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Action.
		/// Description for UPM.IoT_DSL_AF2.ActuatorPerformsAction.Actuator
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Action> Action
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Action>, Action>(global::UPM.IoT_DSL_AF2.ActuatorPerformsAction.ActuatorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Values
	/// Description for UPM.IoT_DSL_AF2.Values
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Values.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Values.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fe100371-7b95-47f6-88ea-f88f38dd46ac")]
	public partial class Values : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Values domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfe100371, 0x7b95, 0x47f6, 0x88, 0xea, 0xf8, 0x8f, 0x38, 0xdd, 0x46, 0xac);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Values(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Values(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x5d0b9d15, 0xa7dd, 0x4ae2, 0x95, 0x52, 0x46, 0x97, 0xfb, 0x77, 0x7e, 0xb4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM.IoT_DSL_AF2.Values.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Values/Name.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Values/Name.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5d0b9d15-a7dd-4ae2-9552-4697fb777eb4")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Values.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Values, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Values.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Values.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Values element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Values element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0x56d7a8b7, 0x8da5, 0x4b57, 0xba, 0x04, 0x39, 0xd5, 0xd6, 0xad, 0x19, 0x26);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.String scalePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Description for UPM.IoT_DSL_AF2.Values.Scale
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Values/Scale.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Values/Scale.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("56d7a8b7-8da5-4b57-ba04-39d5d6ad1926")]
		public global::System.String Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Values.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<Values, global::System.String>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Values.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Values.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Values element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scalePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Values element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Measurement opposite domain role accessor
		/// <summary>
		/// Gets or sets Measurement.
		/// Description for UPM.IoT_DSL_AF2.MeasurementHasValues.Values
		/// </summary>
		public virtual Measurement Measurement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.MeasurementHasValues.ValuesDomainRoleId) as Measurement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.MeasurementHasValues.ValuesDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Action
	/// Description for UPM.IoT_DSL_AF2.Action
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Action.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Action.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9295bdee-58e0-4997-b0b7-3c1e782e3eb3")]
	public partial class Action : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Action domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9295bdee, 0x58e0, 0x4997, 0xb0, 0xb7, 0x3c, 0x1e, 0x78, 0x2e, 0x3e, 0xb3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Action(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Action(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb7809155, 0xe2b0, 0x4705, 0x88, 0xe2, 0xf1, 0x89, 0x5a, 0x04, 0x7f, 0x91);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM.IoT_DSL_AF2.Action.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Action/Name.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Action/Name.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b7809155-e2b0-4705-88e2-f1895a047f91")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Action.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Action, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Action.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Action.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Action element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Action element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x24ecdf94, 0x3583, 0x4158, 0x8c, 0x35, 0x69, 0x1c, 0x62, 0x09, 0xdf, 0x51);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for UPM.IoT_DSL_AF2.Action.Description
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Action/Description.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Action/Description.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("24ecdf94-3583-4158-8c35-691c6209df51")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Action.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Action, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Action.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Action.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Action element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Action element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyIoTDSLAF2Model opposite domain role accessor
		/// <summary>
		/// Gets or sets MyIoTDSLAF2Model.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.Action
		/// </summary>
		public virtual MyIoTDSLAF2Model MyIoTDSLAF2Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.ActionDomainRoleId) as MyIoTDSLAF2Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.ActionDomainRoleId, value);
			}
		}
		#endregion
		#region Actuator opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actuator.
		/// Description for UPM.IoT_DSL_AF2.ActuatorPerformsAction.Action
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actuator> Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actuator>, Actuator>(global::UPM.IoT_DSL_AF2.ActuatorPerformsAction.ActionDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Alarm
	/// Description for UPM.IoT_DSL_AF2.Alarm
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Alarm.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Alarm.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("81f83b50-b905-4215-8226-d3fa6a4a3813")]
	public partial class Alarm : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Alarm domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x81f83b50, 0xb905, 0x4215, 0x82, 0x26, 0xd3, 0xfa, 0x6a, 0x4a, 0x38, 0x13);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Alarm(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Alarm(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3a5d72f0, 0x3f0b, 0x4d11, 0xb0, 0xb5, 0x20, 0x1c, 0x6e, 0xab, 0xd5, 0x41);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM.IoT_DSL_AF2.Alarm.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Alarm/Name.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Alarm/Name.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3a5d72f0-3f0b-4d11-b0b5-201c6eabd541")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Alarm.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Alarm, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Alarm.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Alarm.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Alarm element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Alarm element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Condition domain property code
		
		/// <summary>
		/// Condition domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConditionDomainPropertyId = new global::System.Guid(0x8742e8bf, 0xc055, 0x43f5, 0x9b, 0x97, 0xb2, 0x47, 0x42, 0xb3, 0x34, 0x64);
		
		/// <summary>
		/// Storage for Condition
		/// </summary>
		private global::System.String conditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Condition domain property.
		/// Description for UPM.IoT_DSL_AF2.Alarm.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Alarm/Condition.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Alarm/Condition.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8742e8bf-c055-43f5-9b97-b24742b33464")]
		public global::System.String Condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return conditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Alarm.Condition domain property.
		/// </summary>
		internal sealed partial class ConditionPropertyHandler : DslModeling::DomainPropertyValueHandler<Alarm, global::System.String>
		{
			private ConditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Alarm.Condition domain property value handler.
			/// </summary>
			public static readonly ConditionPropertyHandler Instance = new ConditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Alarm.Condition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Alarm element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.conditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Alarm element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.conditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Advertence domain property code
		
		/// <summary>
		/// Advertence domain property Id.
		/// </summary>
		public static readonly global::System.Guid AdvertenceDomainPropertyId = new global::System.Guid(0x3ac4ec2d, 0x7d45, 0x4943, 0x91, 0x88, 0xc7, 0x50, 0xed, 0x77, 0xc7, 0x63);
		
		/// <summary>
		/// Storage for Advertence
		/// </summary>
		private global::System.String advertencePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Advertence domain property.
		/// Description for UPM.IoT_DSL_AF2.Alarm.Advertence
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Alarm/Advertence.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Alarm/Advertence.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3ac4ec2d-7d45-4943-9188-c750ed77c763")]
		public global::System.String Advertence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return advertencePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AdvertencePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Alarm.Advertence domain property.
		/// </summary>
		internal sealed partial class AdvertencePropertyHandler : DslModeling::DomainPropertyValueHandler<Alarm, global::System.String>
		{
			private AdvertencePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Alarm.Advertence domain property value handler.
			/// </summary>
			public static readonly AdvertencePropertyHandler Instance = new AdvertencePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Alarm.Advertence domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AdvertenceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Alarm element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.advertencePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Alarm element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.advertencePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyIoTDSLAF2Model opposite domain role accessor
		/// <summary>
		/// Gets or sets MyIoTDSLAF2Model.
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.Alarm
		/// </summary>
		public virtual MyIoTDSLAF2Model MyIoTDSLAF2Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.AlarmDomainRoleId) as MyIoTDSLAF2Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.AlarmDomainRoleId, value);
			}
		}
		#endregion
		#region Controller opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Controller.
		/// Description for UPM.IoT_DSL_AF2.ControllerTriggersAlarm.Alarm
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Controller> Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm.AlarmDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Drone
	/// Description for UPM.IoT_DSL_AF2.Drone
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Drone.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Drone.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("583a7754-2995-4718-b8b8-3a22fbdaad3a")]
	public partial class Drone : IoTDevice
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Drone domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x583a7754, 0x2995, 0x4718, 0xb8, 0xb8, 0x3a, 0x22, 0xfb, 0xda, 0xad, 0x3a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Drone(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Drone(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Bus
	/// Description for UPM.IoT_DSL_AF2.Bus
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Bus.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Bus.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0edc5974-81d6-4272-89e5-a191541c2e58")]
	public partial class Bus : IoTDevice
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Bus domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0edc5974, 0x81d6, 0x4272, 0x89, 0xe5, 0xa1, 0x91, 0x54, 0x1c, 0x2e, 0x58);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Bus(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Bus(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass GPS
	/// Description for UPM.IoT_DSL_AF2.GPS
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.GPS.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.GPS.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("eee7f5ac-dca2-424c-9965-e6a37d6f8c5c")]
	public partial class GPS : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GPS domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeee7f5ac, 0xdca2, 0x424c, 0x99, 0x65, 0xe6, 0xa3, 0x7d, 0x6f, 0x8c, 0x5c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GPS(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GPS(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass AirQuality
	/// Description for UPM.IoT_DSL_AF2.AirQuality
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.AirQuality.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.AirQuality.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bca125f4-3a29-4ae1-b054-b12ee9c0bb8c")]
	public partial class AirQuality : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AirQuality domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbca125f4, 0x3a29, 0x4ae1, 0xb0, 0x54, 0xb1, 0x2e, 0xe9, 0xc0, 0xbb, 0x8c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AirQuality(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AirQuality(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainClass Accelerometer
	/// Description for UPM.IoT_DSL_AF2.Accelerometer
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.Accelerometer.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.Accelerometer.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0d653a7f-73cc-4196-b5ee-d48e1bc501fd")]
	public partial class Accelerometer : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Accelerometer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d653a7f, 0x73cc, 0x4196, 0xb5, 0xee, 0xd4, 0x8e, 0x1b, 0xc5, 0x01, 0xfd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Accelerometer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Accelerometer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
