//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship MyIoTDSLAF2ModelHasIoTDevice
	/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6cbf33ee-babc-4efe-996b-4d65a946731b")]
	public partial class MyIoTDSLAF2ModelHasIoTDevice : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyIoTDSLAF2ModelHasIoTDevice domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6cbf33ee, 0xbabc, 0x4efe, 0x99, 0x6b, 0x4d, 0x65, 0xa9, 0x46, 0x73, 0x1b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyIoTDSLAF2ModelHasIoTDevice link in the same Partition as the given MyIoTDSLAF2Model
		/// </summary>
		/// <param name="source">MyIoTDSLAF2Model to use as the source of the relationship.</param>
		/// <param name="target">IoTDevice to use as the target of the relationship.</param>
		public MyIoTDSLAF2ModelHasIoTDevice(MyIoTDSLAF2Model source, IoTDevice target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyIoTDSLAF2ModelHasIoTDevice.MyIoTDSLAF2ModelDomainRoleId, source), new DslModeling::RoleAssignment(MyIoTDSLAF2ModelHasIoTDevice.IoTDeviceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyIoTDSLAF2ModelHasIoTDevice(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyIoTDSLAF2ModelHasIoTDevice(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyIoTDSLAF2ModelHasIoTDevice(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyIoTDSLAF2ModelHasIoTDevice(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyIoTDSLAF2Model domain role code
		
		/// <summary>
		/// MyIoTDSLAF2Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyIoTDSLAF2ModelDomainRoleId = new global::System.Guid(0xe691e757, 0xeb66, 0x4be3, 0x82, 0x71, 0xb1, 0xd2, 0x64, 0x5f, 0xef, 0x29);
		
		/// <summary>
		/// DomainRole MyIoTDSLAF2Model
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.MyIoTDSLAF2Model
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice/MyIoTDSLAF2Model.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice/MyIoTDSLAF2Model.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IoTDevice", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice/MyIoTDSLAF2Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e691e757-eb66-4be3-8271-b1d2645fef29")]
		public virtual MyIoTDSLAF2Model MyIoTDSLAF2Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyIoTDSLAF2Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyIoTDSLAF2ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyIoTDSLAF2ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyIoTDSLAF2Model of a IoTDevice
		/// <summary>
		/// Gets MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MyIoTDSLAF2Model GetMyIoTDSLAF2Model(IoTDevice element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IoTDeviceDomainRoleId) as MyIoTDSLAF2Model;
		}
		
		/// <summary>
		/// Sets MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMyIoTDSLAF2Model(IoTDevice element, MyIoTDSLAF2Model newMyIoTDSLAF2Model)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IoTDeviceDomainRoleId, newMyIoTDSLAF2Model);
		}
		#endregion
		#region IoTDevice domain role code
		
		/// <summary>
		/// IoTDevice domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTDeviceDomainRoleId = new global::System.Guid(0x0abbb28c, 0x27df, 0x40e0, 0x96, 0x01, 0xfd, 0x76, 0x74, 0x81, 0x03, 0x58);
		
		/// <summary>
		/// DomainRole IoTDevice
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.IoTDevice
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice/IoTDevice.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice/IoTDevice.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyIoTDSLAF2Model", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice/IoTDevice.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0abbb28c-27df-40e0-9601-fd7674810358")]
		public virtual IoTDevice IoTDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTDevice)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTDeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTDeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTDevice of a MyIoTDSLAF2Model
		/// <summary>
		/// Gets a list of IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IoTDevice> GetIoTDevice(MyIoTDSLAF2Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IoTDevice>, IoTDevice>(element, MyIoTDSLAF2ModelDomainRoleId);
		}
		#endregion
		#region MyIoTDSLAF2Model link accessor
		/// <summary>
		/// Get the list of MyIoTDSLAF2ModelHasIoTDevice links to a MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice> GetLinksToIoTDevice ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model myIoTDSLAF2ModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice>(myIoTDSLAF2ModelInstance, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.MyIoTDSLAF2ModelDomainRoleId);
		}
		#endregion
		#region IoTDevice link accessor
		/// <summary>
		/// Get the MyIoTDSLAF2ModelHasIoTDevice link to a IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice GetLinkToMyIoTDSLAF2Model (global::UPM.IoT_DSL_AF2.IoTDevice ioTDeviceInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice>(ioTDeviceInstance, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.IoTDeviceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IoTDevice not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MyIoTDSLAF2ModelHasIoTDevice instance accessors
		
		/// <summary>
		/// Get any MyIoTDSLAF2ModelHasIoTDevice links between a given MyIoTDSLAF2Model and a IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice> GetLinks( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model source, global::UPM.IoT_DSL_AF2.IoTDevice target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice>(source, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.MyIoTDSLAF2ModelDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice link in links )
			{
				if ( target.Equals(link.IoTDevice) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyIoTDSLAF2ModelHasIoTDevice link between a given MyIoTDSLAF2Modeland a IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice GetLink( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model source, global::UPM.IoT_DSL_AF2.IoTDevice target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice>(source, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice.MyIoTDSLAF2ModelDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasIoTDevice link in links )
			{
				if ( target.Equals(link.IoTDevice) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship IoTDeviceHasController
	/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasController
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasController.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasController.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("313147ec-e5a2-4b4d-8f32-90418ac3cf00")]
	public partial class IoTDeviceHasController : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTDeviceHasController domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x313147ec, 0xe5a2, 0x4b4d, 0x8f, 0x32, 0x90, 0x41, 0x8a, 0xc3, 0xcf, 0x00);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTDeviceHasController link in the same Partition as the given IoTDevice
		/// </summary>
		/// <param name="source">IoTDevice to use as the source of the relationship.</param>
		/// <param name="target">Controller to use as the target of the relationship.</param>
		public IoTDeviceHasController(IoTDevice source, Controller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTDeviceHasController.IoTDeviceDomainRoleId, source), new DslModeling::RoleAssignment(IoTDeviceHasController.ControllerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTDeviceHasController(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTDeviceHasController(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTDeviceHasController(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTDeviceHasController(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTDevice domain role code
		
		/// <summary>
		/// IoTDevice domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTDeviceDomainRoleId = new global::System.Guid(0x84fd2efa, 0xfc9f, 0x48a1, 0x91, 0x06, 0x1d, 0x87, 0xea, 0x83, 0x01, 0x5e);
		
		/// <summary>
		/// DomainRole IoTDevice
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasController.IoTDevice
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasController/IoTDevice.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasController/IoTDevice.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Controller", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.IoTDeviceHasController/IoTDevice.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("84fd2efa-fc9f-48a1-9106-1d87ea83015e")]
		public virtual IoTDevice IoTDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTDevice)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTDeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTDeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTDevice of a Controller
		/// <summary>
		/// Gets IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTDevice GetIoTDevice(Controller element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ControllerDomainRoleId) as IoTDevice;
		}
		
		/// <summary>
		/// Sets IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTDevice(Controller element, IoTDevice newIoTDevice)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ControllerDomainRoleId, newIoTDevice);
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0xf3f126d8, 0x60cc, 0x4e8b, 0xa5, 0x0d, 0xca, 0x74, 0x30, 0xa8, 0xa2, 0x26);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasController.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasController/Controller.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasController/Controller.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTDevice", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.IoTDeviceHasController/Controller.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f3f126d8-60cc-4e8b-a50d-ca7430a8a226")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a IoTDevice
		/// <summary>
		/// Gets a list of Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Controller> GetController(IoTDevice element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(element, IoTDeviceDomainRoleId);
		}
		#endregion
		#region IoTDevice link accessor
		/// <summary>
		/// Get the list of IoTDeviceHasController links to a IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.IoTDeviceHasController> GetLinksToController ( global::UPM.IoT_DSL_AF2.IoTDevice ioTDeviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasController>(ioTDeviceInstance, global::UPM.IoT_DSL_AF2.IoTDeviceHasController.IoTDeviceDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the IoTDeviceHasController link to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.IoTDeviceHasController GetLinkToIoTDevice (global::UPM.IoT_DSL_AF2.Controller controllerInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasController> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasController>(controllerInstance, global::UPM.IoT_DSL_AF2.IoTDeviceHasController.ControllerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Controller not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTDeviceHasController instance accessors
		
		/// <summary>
		/// Get any IoTDeviceHasController links between a given IoTDevice and a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.IoTDeviceHasController> GetLinks( global::UPM.IoT_DSL_AF2.IoTDevice source, global::UPM.IoT_DSL_AF2.Controller target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.IoTDeviceHasController> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.IoTDeviceHasController>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasController> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasController>(source, global::UPM.IoT_DSL_AF2.IoTDeviceHasController.IoTDeviceDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.IoTDeviceHasController link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTDeviceHasController link between a given IoTDeviceand a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.IoTDeviceHasController GetLink( global::UPM.IoT_DSL_AF2.IoTDevice source, global::UPM.IoT_DSL_AF2.Controller target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasController> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasController>(source, global::UPM.IoT_DSL_AF2.IoTDeviceHasController.IoTDeviceDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.IoTDeviceHasController link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship ControllerMonitorsSensor
	/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsSensor
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerMonitorsSensor.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerMonitorsSensor.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7eba10f8-c750-4c6e-9f1f-2613b026dd26")]
	public partial class ControllerMonitorsSensor : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerMonitorsSensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7eba10f8, 0xc750, 0x4c6e, 0x9f, 0x1f, 0x26, 0x13, 0xb0, 0x26, 0xdd, 0x26);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerMonitorsSensor link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">Sensor to use as the target of the relationship.</param>
		public ControllerMonitorsSensor(Controller source, Sensor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerMonitorsSensor.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerMonitorsSensor.SensorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerMonitorsSensor(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerMonitorsSensor(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerMonitorsSensor(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerMonitorsSensor(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0xb2b22a71, 0xf172, 0x495f, 0xbe, 0xb8, 0x49, 0x85, 0xed, 0xff, 0xe3, 0x81);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsSensor.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerMonitorsSensor/Controller.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerMonitorsSensor/Controller.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sensor", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.ControllerMonitorsSensor/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b2b22a71-f172-495f-beb8-4985edffe381")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a Sensor
		/// <summary>
		/// Gets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Controller GetController(Sensor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SensorDomainRoleId) as Controller;
		}
		
		/// <summary>
		/// Sets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetController(Sensor element, Controller newController)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SensorDomainRoleId, newController);
		}
		#endregion
		#region Sensor domain role code
		
		/// <summary>
		/// Sensor domain role Id.
		/// </summary>
		public static readonly global::System.Guid SensorDomainRoleId = new global::System.Guid(0x583354f7, 0x64dc, 0x4f3a, 0x9d, 0xfa, 0x78, 0x1b, 0x70, 0xd9, 0x9e, 0x39);
		
		/// <summary>
		/// DomainRole Sensor
		/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsSensor.Sensor
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerMonitorsSensor/Sensor.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerMonitorsSensor/Sensor.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.ControllerMonitorsSensor/Sensor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("583354f7-64dc-4f3a-9dfa-781b70d99e39")]
		public virtual Sensor Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Sensor)DslModeling::DomainRoleInfo.GetRolePlayer(this, SensorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SensorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensor of a Controller
		/// <summary>
		/// Gets a list of Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Sensor> GetSensor(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerMonitorsSensor links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor> GetLinksToSensor ( global::UPM.IoT_DSL_AF2.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor>(controllerInstance, global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor.ControllerDomainRoleId);
		}
		#endregion
		#region Sensor link accessor
		/// <summary>
		/// Get the ControllerMonitorsSensor link to a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor GetLinkToController (global::UPM.IoT_DSL_AF2.Sensor sensorInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor>(sensorInstance, global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor.SensorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Sensor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ControllerMonitorsSensor instance accessors
		
		/// <summary>
		/// Get any ControllerMonitorsSensor links between a given Controller and a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor> GetLinks( global::UPM.IoT_DSL_AF2.Controller source, global::UPM.IoT_DSL_AF2.Sensor target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor>(source, global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor.ControllerDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor link in links )
			{
				if ( target.Equals(link.Sensor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerMonitorsSensor link between a given Controllerand a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor GetLink( global::UPM.IoT_DSL_AF2.Controller source, global::UPM.IoT_DSL_AF2.Sensor target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor>(source, global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor.ControllerDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.ControllerMonitorsSensor link in links )
			{
				if ( target.Equals(link.Sensor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship IoTDeviceHasSensor
	/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasSensor
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasSensor.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasSensor.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e856c7dd-f66c-46b1-9c89-b04ade6b95ab")]
	public partial class IoTDeviceHasSensor : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTDeviceHasSensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe856c7dd, 0xf66c, 0x46b1, 0x9c, 0x89, 0xb0, 0x4a, 0xde, 0x6b, 0x95, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTDeviceHasSensor link in the same Partition as the given IoTDevice
		/// </summary>
		/// <param name="source">IoTDevice to use as the source of the relationship.</param>
		/// <param name="target">Sensor to use as the target of the relationship.</param>
		public IoTDeviceHasSensor(IoTDevice source, Sensor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTDeviceHasSensor.IoTDeviceDomainRoleId, source), new DslModeling::RoleAssignment(IoTDeviceHasSensor.SensorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTDeviceHasSensor(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTDeviceHasSensor(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTDeviceHasSensor(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTDeviceHasSensor(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTDevice domain role code
		
		/// <summary>
		/// IoTDevice domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTDeviceDomainRoleId = new global::System.Guid(0x82c84bf6, 0x729d, 0x4145, 0x92, 0x5c, 0xd2, 0xfb, 0x1f, 0x19, 0x19, 0x22);
		
		/// <summary>
		/// DomainRole IoTDevice
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasSensor.IoTDevice
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasSensor/IoTDevice.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasSensor/IoTDevice.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sensor", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.IoTDeviceHasSensor/IoTDevice.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("82c84bf6-729d-4145-925c-d2fb1f191922")]
		public virtual IoTDevice IoTDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTDevice)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTDeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTDeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTDevice of a Sensor
		/// <summary>
		/// Gets IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTDevice GetIoTDevice(Sensor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SensorDomainRoleId) as IoTDevice;
		}
		
		/// <summary>
		/// Sets IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTDevice(Sensor element, IoTDevice newIoTDevice)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SensorDomainRoleId, newIoTDevice);
		}
		#endregion
		#region Sensor domain role code
		
		/// <summary>
		/// Sensor domain role Id.
		/// </summary>
		public static readonly global::System.Guid SensorDomainRoleId = new global::System.Guid(0x362d00fb, 0xacac, 0x44a8, 0xaa, 0x48, 0x9b, 0x46, 0x4f, 0xbb, 0x68, 0x5c);
		
		/// <summary>
		/// DomainRole Sensor
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasSensor.Sensor
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasSensor/Sensor.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasSensor/Sensor.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTDevice", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.IoTDeviceHasSensor/Sensor.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("362d00fb-acac-44a8-aa48-9b464fbb685c")]
		public virtual Sensor Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Sensor)DslModeling::DomainRoleInfo.GetRolePlayer(this, SensorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SensorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensor of a IoTDevice
		/// <summary>
		/// Gets a list of Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Sensor> GetSensor(IoTDevice element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(element, IoTDeviceDomainRoleId);
		}
		#endregion
		#region IoTDevice link accessor
		/// <summary>
		/// Get the list of IoTDeviceHasSensor links to a IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor> GetLinksToSensor ( global::UPM.IoT_DSL_AF2.IoTDevice ioTDeviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor>(ioTDeviceInstance, global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.IoTDeviceDomainRoleId);
		}
		#endregion
		#region Sensor link accessor
		/// <summary>
		/// Get the IoTDeviceHasSensor link to a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor GetLinkToIoTDevice (global::UPM.IoT_DSL_AF2.Sensor sensorInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor>(sensorInstance, global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.SensorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Sensor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTDeviceHasSensor instance accessors
		
		/// <summary>
		/// Get any IoTDeviceHasSensor links between a given IoTDevice and a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor> GetLinks( global::UPM.IoT_DSL_AF2.IoTDevice source, global::UPM.IoT_DSL_AF2.Sensor target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor>(source, global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.IoTDeviceDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor link in links )
			{
				if ( target.Equals(link.Sensor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTDeviceHasSensor link between a given IoTDeviceand a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor GetLink( global::UPM.IoT_DSL_AF2.IoTDevice source, global::UPM.IoT_DSL_AF2.Sensor target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor>(source, global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor.IoTDeviceDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.IoTDeviceHasSensor link in links )
			{
				if ( target.Equals(link.Sensor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship SensorMonitorsMesurement
	/// Description for UPM.IoT_DSL_AF2.SensorMonitorsMesurement
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.SensorMonitorsMesurement.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.SensorMonitorsMesurement.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("33796e53-a913-4446-aa04-11e7b572b03f")]
	public partial class SensorMonitorsMesurement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SensorMonitorsMesurement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33796e53, 0xa913, 0x4446, 0xaa, 0x04, 0x11, 0xe7, 0xb5, 0x72, 0xb0, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SensorMonitorsMesurement link in the same Partition as the given Sensor
		/// </summary>
		/// <param name="source">Sensor to use as the source of the relationship.</param>
		/// <param name="target">Measurement to use as the target of the relationship.</param>
		public SensorMonitorsMesurement(Sensor source, Measurement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SensorMonitorsMesurement.SensorDomainRoleId, source), new DslModeling::RoleAssignment(SensorMonitorsMesurement.MeasurementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SensorMonitorsMesurement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SensorMonitorsMesurement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SensorMonitorsMesurement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SensorMonitorsMesurement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Sensor domain role code
		
		/// <summary>
		/// Sensor domain role Id.
		/// </summary>
		public static readonly global::System.Guid SensorDomainRoleId = new global::System.Guid(0x956870a8, 0x6e1c, 0x48ed, 0x96, 0x3c, 0xb8, 0xd7, 0xb3, 0xfe, 0x0c, 0x31);
		
		/// <summary>
		/// DomainRole Sensor
		/// Description for UPM.IoT_DSL_AF2.SensorMonitorsMesurement.Sensor
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.SensorMonitorsMesurement/Sensor.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.SensorMonitorsMesurement/Sensor.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Measurement", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.SensorMonitorsMesurement/Sensor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("956870a8-6e1c-48ed-963c-b8d7b3fe0c31")]
		public virtual Sensor Sensor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Sensor)DslModeling::DomainRoleInfo.GetRolePlayer(this, SensorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SensorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensor of a Measurement
		/// <summary>
		/// Gets a list of Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Sensor> GetSensor(Measurement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(element, MeasurementDomainRoleId);
		}
		#endregion
		#region Measurement domain role code
		
		/// <summary>
		/// Measurement domain role Id.
		/// </summary>
		public static readonly global::System.Guid MeasurementDomainRoleId = new global::System.Guid(0xad4d425c, 0x7e21, 0x47cc, 0xb7, 0xa1, 0x93, 0x99, 0xe4, 0xbf, 0x10, 0x54);
		
		/// <summary>
		/// DomainRole Measurement
		/// Description for UPM.IoT_DSL_AF2.SensorMonitorsMesurement.Measurement
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.SensorMonitorsMesurement/Measurement.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.SensorMonitorsMesurement/Measurement.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sensor", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.SensorMonitorsMesurement/Measurement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("ad4d425c-7e21-47cc-b7a1-9399e4bf1054")]
		public virtual Measurement Measurement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Measurement)DslModeling::DomainRoleInfo.GetRolePlayer(this, MeasurementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MeasurementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Measurement of a Sensor
		/// <summary>
		/// Gets a list of Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Measurement> GetMeasurement(Sensor element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Measurement>, Measurement>(element, SensorDomainRoleId);
		}
		#endregion
		#region Sensor link accessor
		/// <summary>
		/// Get the list of SensorMonitorsMesurement links to a Sensor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement> GetLinksToMeasurement ( global::UPM.IoT_DSL_AF2.Sensor sensorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement>(sensorInstance, global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement.SensorDomainRoleId);
		}
		#endregion
		#region Measurement link accessor
		/// <summary>
		/// Get the list of SensorMonitorsMesurement links to a Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement> GetLinksToSensor ( global::UPM.IoT_DSL_AF2.Measurement measurementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement>(measurementInstance, global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement.MeasurementDomainRoleId);
		}
		#endregion
		#region SensorMonitorsMesurement instance accessors
		
		/// <summary>
		/// Get any SensorMonitorsMesurement links between a given Sensor and a Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement> GetLinks( global::UPM.IoT_DSL_AF2.Sensor source, global::UPM.IoT_DSL_AF2.Measurement target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement>(source, global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement.SensorDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement link in links )
			{
				if ( target.Equals(link.Measurement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SensorMonitorsMesurement link between a given Sensorand a Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement GetLink( global::UPM.IoT_DSL_AF2.Sensor source, global::UPM.IoT_DSL_AF2.Measurement target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement>(source, global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement.SensorDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.SensorMonitorsMesurement link in links )
			{
				if ( target.Equals(link.Measurement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship IoTDeviceHasActuator
	/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasActuator
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasActuator.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasActuator.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("27fc1c49-39ff-44df-9075-a392abe1333e")]
	public partial class IoTDeviceHasActuator : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTDeviceHasActuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27fc1c49, 0x39ff, 0x44df, 0x90, 0x75, 0xa3, 0x92, 0xab, 0xe1, 0x33, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTDeviceHasActuator link in the same Partition as the given IoTDevice
		/// </summary>
		/// <param name="source">IoTDevice to use as the source of the relationship.</param>
		/// <param name="target">Actuator to use as the target of the relationship.</param>
		public IoTDeviceHasActuator(IoTDevice source, Actuator target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTDeviceHasActuator.IoTDeviceDomainRoleId, source), new DslModeling::RoleAssignment(IoTDeviceHasActuator.ActuatorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTDeviceHasActuator(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTDeviceHasActuator(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTDeviceHasActuator(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTDeviceHasActuator(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTDevice domain role code
		
		/// <summary>
		/// IoTDevice domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTDeviceDomainRoleId = new global::System.Guid(0xfb8bb131, 0xaa4d, 0x4784, 0xac, 0x35, 0x65, 0xb8, 0x6f, 0xf8, 0x88, 0x21);
		
		/// <summary>
		/// DomainRole IoTDevice
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasActuator.IoTDevice
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasActuator/IoTDevice.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasActuator/IoTDevice.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actuator", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.IoTDeviceHasActuator/IoTDevice.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fb8bb131-aa4d-4784-ac35-65b86ff88821")]
		public virtual IoTDevice IoTDevice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTDevice)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTDeviceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTDeviceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTDevice of a Actuator
		/// <summary>
		/// Gets IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTDevice GetIoTDevice(Actuator element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ActuatorDomainRoleId) as IoTDevice;
		}
		
		/// <summary>
		/// Sets IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTDevice(Actuator element, IoTDevice newIoTDevice)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ActuatorDomainRoleId, newIoTDevice);
		}
		#endregion
		#region Actuator domain role code
		
		/// <summary>
		/// Actuator domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActuatorDomainRoleId = new global::System.Guid(0x9abea58a, 0x7ee7, 0x4eee, 0x87, 0x0e, 0x4b, 0xf5, 0x90, 0x80, 0x4f, 0xc7);
		
		/// <summary>
		/// DomainRole Actuator
		/// Description for UPM.IoT_DSL_AF2.IoTDeviceHasActuator.Actuator
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.IoTDeviceHasActuator/Actuator.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.IoTDeviceHasActuator/Actuator.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTDevice", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.IoTDeviceHasActuator/Actuator.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9abea58a-7ee7-4eee-870e-4bf590804fc7")]
		public virtual Actuator Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actuator)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActuatorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActuatorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actuator of a IoTDevice
		/// <summary>
		/// Gets a list of Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Actuator> GetActuator(IoTDevice element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Actuator>, Actuator>(element, IoTDeviceDomainRoleId);
		}
		#endregion
		#region IoTDevice link accessor
		/// <summary>
		/// Get the list of IoTDeviceHasActuator links to a IoTDevice.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator> GetLinksToActuator ( global::UPM.IoT_DSL_AF2.IoTDevice ioTDeviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator>(ioTDeviceInstance, global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.IoTDeviceDomainRoleId);
		}
		#endregion
		#region Actuator link accessor
		/// <summary>
		/// Get the IoTDeviceHasActuator link to a Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator GetLinkToIoTDevice (global::UPM.IoT_DSL_AF2.Actuator actuatorInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator>(actuatorInstance, global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.ActuatorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Actuator not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTDeviceHasActuator instance accessors
		
		/// <summary>
		/// Get any IoTDeviceHasActuator links between a given IoTDevice and a Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator> GetLinks( global::UPM.IoT_DSL_AF2.IoTDevice source, global::UPM.IoT_DSL_AF2.Actuator target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator>(source, global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.IoTDeviceDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator link in links )
			{
				if ( target.Equals(link.Actuator) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTDeviceHasActuator link between a given IoTDeviceand a Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator GetLink( global::UPM.IoT_DSL_AF2.IoTDevice source, global::UPM.IoT_DSL_AF2.Actuator target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator>(source, global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator.IoTDeviceDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.IoTDeviceHasActuator link in links )
			{
				if ( target.Equals(link.Actuator) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship ControllerMonitorsActuator
	/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsActuator
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerMonitorsActuator.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerMonitorsActuator.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("121b5dc2-99b1-49c6-8a56-da98af56b785")]
	public partial class ControllerMonitorsActuator : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerMonitorsActuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x121b5dc2, 0x99b1, 0x49c6, 0x8a, 0x56, 0xda, 0x98, 0xaf, 0x56, 0xb7, 0x85);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerMonitorsActuator link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">Actuator to use as the target of the relationship.</param>
		public ControllerMonitorsActuator(Controller source, Actuator target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerMonitorsActuator.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerMonitorsActuator.ActuatorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerMonitorsActuator(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerMonitorsActuator(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerMonitorsActuator(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerMonitorsActuator(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0x84440cae, 0x5fc0, 0x4384, 0xbe, 0x81, 0x1a, 0xc7, 0xef, 0x12, 0x0f, 0x1b);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsActuator.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerMonitorsActuator/Controller.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerMonitorsActuator/Controller.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actuator", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.ControllerMonitorsActuator/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("84440cae-5fc0-4384-be81-1ac7ef120f1b")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a Actuator
		/// <summary>
		/// Gets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Controller GetController(Actuator element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ActuatorDomainRoleId) as Controller;
		}
		
		/// <summary>
		/// Sets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetController(Actuator element, Controller newController)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ActuatorDomainRoleId, newController);
		}
		#endregion
		#region Actuator domain role code
		
		/// <summary>
		/// Actuator domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActuatorDomainRoleId = new global::System.Guid(0xf136de6d, 0x8b63, 0x490c, 0xa4, 0x11, 0x36, 0xad, 0x3c, 0xc8, 0xcd, 0xff);
		
		/// <summary>
		/// DomainRole Actuator
		/// Description for UPM.IoT_DSL_AF2.ControllerMonitorsActuator.Actuator
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerMonitorsActuator/Actuator.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerMonitorsActuator/Actuator.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.ControllerMonitorsActuator/Actuator.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f136de6d-8b63-490c-a411-36ad3cc8cdff")]
		public virtual Actuator Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actuator)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActuatorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActuatorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actuator of a Controller
		/// <summary>
		/// Gets a list of Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Actuator> GetActuator(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Actuator>, Actuator>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerMonitorsActuator links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator> GetLinksToActuator ( global::UPM.IoT_DSL_AF2.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator>(controllerInstance, global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator.ControllerDomainRoleId);
		}
		#endregion
		#region Actuator link accessor
		/// <summary>
		/// Get the ControllerMonitorsActuator link to a Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator GetLinkToController (global::UPM.IoT_DSL_AF2.Actuator actuatorInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator>(actuatorInstance, global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator.ActuatorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Actuator not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ControllerMonitorsActuator instance accessors
		
		/// <summary>
		/// Get any ControllerMonitorsActuator links between a given Controller and a Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator> GetLinks( global::UPM.IoT_DSL_AF2.Controller source, global::UPM.IoT_DSL_AF2.Actuator target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator>(source, global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator.ControllerDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator link in links )
			{
				if ( target.Equals(link.Actuator) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerMonitorsActuator link between a given Controllerand a Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator GetLink( global::UPM.IoT_DSL_AF2.Controller source, global::UPM.IoT_DSL_AF2.Actuator target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator>(source, global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator.ControllerDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.ControllerMonitorsActuator link in links )
			{
				if ( target.Equals(link.Actuator) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship MyIoTDSLAF2ModelHasMeasurement
	/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ab806710-2b68-4a86-9329-80fd7b69f30d")]
	public partial class MyIoTDSLAF2ModelHasMeasurement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyIoTDSLAF2ModelHasMeasurement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xab806710, 0x2b68, 0x4a86, 0x93, 0x29, 0x80, 0xfd, 0x7b, 0x69, 0xf3, 0x0d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyIoTDSLAF2ModelHasMeasurement link in the same Partition as the given MyIoTDSLAF2Model
		/// </summary>
		/// <param name="source">MyIoTDSLAF2Model to use as the source of the relationship.</param>
		/// <param name="target">Measurement to use as the target of the relationship.</param>
		public MyIoTDSLAF2ModelHasMeasurement(MyIoTDSLAF2Model source, Measurement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyIoTDSLAF2ModelHasMeasurement.MyIoTDSLAF2ModelDomainRoleId, source), new DslModeling::RoleAssignment(MyIoTDSLAF2ModelHasMeasurement.MeasurementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyIoTDSLAF2ModelHasMeasurement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyIoTDSLAF2ModelHasMeasurement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyIoTDSLAF2ModelHasMeasurement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyIoTDSLAF2ModelHasMeasurement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyIoTDSLAF2Model domain role code
		
		/// <summary>
		/// MyIoTDSLAF2Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyIoTDSLAF2ModelDomainRoleId = new global::System.Guid(0xbbfe5650, 0x6359, 0x409c, 0x94, 0x2c, 0x32, 0xf2, 0x1d, 0xa4, 0x4e, 0x92);
		
		/// <summary>
		/// DomainRole MyIoTDSLAF2Model
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MyIoTDSLAF2Model
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement/MyIoTDSLAF2Model.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement/MyIoTDSLAF2Model.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Measurement", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement/MyIoTDSLAF2Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bbfe5650-6359-409c-942c-32f21da44e92")]
		public virtual MyIoTDSLAF2Model MyIoTDSLAF2Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyIoTDSLAF2Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyIoTDSLAF2ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyIoTDSLAF2ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyIoTDSLAF2Model of a Measurement
		/// <summary>
		/// Gets MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MyIoTDSLAF2Model GetMyIoTDSLAF2Model(Measurement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MeasurementDomainRoleId) as MyIoTDSLAF2Model;
		}
		
		/// <summary>
		/// Sets MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMyIoTDSLAF2Model(Measurement element, MyIoTDSLAF2Model newMyIoTDSLAF2Model)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MeasurementDomainRoleId, newMyIoTDSLAF2Model);
		}
		#endregion
		#region Measurement domain role code
		
		/// <summary>
		/// Measurement domain role Id.
		/// </summary>
		public static readonly global::System.Guid MeasurementDomainRoleId = new global::System.Guid(0xb47bcd5d, 0x3a6d, 0x466e, 0xa7, 0xa3, 0x1e, 0x58, 0x01, 0xc0, 0xab, 0x39);
		
		/// <summary>
		/// DomainRole Measurement
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.Measurement
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement/Measurement.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement/Measurement.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyIoTDSLAF2Model", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement/Measurement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b47bcd5d-3a6d-466e-a7a3-1e5801c0ab39")]
		public virtual Measurement Measurement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Measurement)DslModeling::DomainRoleInfo.GetRolePlayer(this, MeasurementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MeasurementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Measurement of a MyIoTDSLAF2Model
		/// <summary>
		/// Gets a list of Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Measurement> GetMeasurement(MyIoTDSLAF2Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Measurement>, Measurement>(element, MyIoTDSLAF2ModelDomainRoleId);
		}
		#endregion
		#region MyIoTDSLAF2Model link accessor
		/// <summary>
		/// Get the list of MyIoTDSLAF2ModelHasMeasurement links to a MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement> GetLinksToMeasurement ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model myIoTDSLAF2ModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement>(myIoTDSLAF2ModelInstance, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MyIoTDSLAF2ModelDomainRoleId);
		}
		#endregion
		#region Measurement link accessor
		/// <summary>
		/// Get the MyIoTDSLAF2ModelHasMeasurement link to a Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement GetLinkToMyIoTDSLAF2Model (global::UPM.IoT_DSL_AF2.Measurement measurementInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement>(measurementInstance, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MeasurementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Measurement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MyIoTDSLAF2ModelHasMeasurement instance accessors
		
		/// <summary>
		/// Get any MyIoTDSLAF2ModelHasMeasurement links between a given MyIoTDSLAF2Model and a Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement> GetLinks( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model source, global::UPM.IoT_DSL_AF2.Measurement target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement>(source, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MyIoTDSLAF2ModelDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement link in links )
			{
				if ( target.Equals(link.Measurement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyIoTDSLAF2ModelHasMeasurement link between a given MyIoTDSLAF2Modeland a Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement GetLink( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model source, global::UPM.IoT_DSL_AF2.Measurement target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement>(source, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement.MyIoTDSLAF2ModelDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasMeasurement link in links )
			{
				if ( target.Equals(link.Measurement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship MeasurementHasValues
	/// Description for UPM.IoT_DSL_AF2.MeasurementHasValues
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MeasurementHasValues.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MeasurementHasValues.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1319576d-b9a0-4cd9-a0e5-946df6d83969")]
	public partial class MeasurementHasValues : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MeasurementHasValues domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1319576d, 0xb9a0, 0x4cd9, 0xa0, 0xe5, 0x94, 0x6d, 0xf6, 0xd8, 0x39, 0x69);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MeasurementHasValues link in the same Partition as the given Measurement
		/// </summary>
		/// <param name="source">Measurement to use as the source of the relationship.</param>
		/// <param name="target">Values to use as the target of the relationship.</param>
		public MeasurementHasValues(Measurement source, Values target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MeasurementHasValues.MeasurementDomainRoleId, source), new DslModeling::RoleAssignment(MeasurementHasValues.ValuesDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MeasurementHasValues(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MeasurementHasValues(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MeasurementHasValues(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MeasurementHasValues(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Measurement domain role code
		
		/// <summary>
		/// Measurement domain role Id.
		/// </summary>
		public static readonly global::System.Guid MeasurementDomainRoleId = new global::System.Guid(0xd2e6f126, 0xda33, 0x49b0, 0xa7, 0xdc, 0x96, 0x1e, 0x81, 0xcb, 0x6d, 0x83);
		
		/// <summary>
		/// DomainRole Measurement
		/// Description for UPM.IoT_DSL_AF2.MeasurementHasValues.Measurement
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MeasurementHasValues/Measurement.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MeasurementHasValues/Measurement.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Values", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MeasurementHasValues/Measurement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d2e6f126-da33-49b0-a7dc-961e81cb6d83")]
		public virtual Measurement Measurement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Measurement)DslModeling::DomainRoleInfo.GetRolePlayer(this, MeasurementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MeasurementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Measurement of a Values
		/// <summary>
		/// Gets Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Measurement GetMeasurement(Values element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValuesDomainRoleId) as Measurement;
		}
		
		/// <summary>
		/// Sets Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMeasurement(Values element, Measurement newMeasurement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValuesDomainRoleId, newMeasurement);
		}
		#endregion
		#region Values domain role code
		
		/// <summary>
		/// Values domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValuesDomainRoleId = new global::System.Guid(0xaa7f17f4, 0x2f83, 0x4775, 0x9a, 0xca, 0xb7, 0xee, 0xbe, 0x7f, 0x27, 0x1c);
		
		/// <summary>
		/// DomainRole Values
		/// Description for UPM.IoT_DSL_AF2.MeasurementHasValues.Values
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MeasurementHasValues/Values.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MeasurementHasValues/Values.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Measurement", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MeasurementHasValues/Values.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aa7f17f4-2f83-4775-9aca-b7eebe7f271c")]
		public virtual Values Values
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Values)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValuesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValuesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Values of a Measurement
		/// <summary>
		/// Gets a list of Values.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Values> GetValues(Measurement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Values>, Values>(element, MeasurementDomainRoleId);
		}
		#endregion
		#region Measurement link accessor
		/// <summary>
		/// Get the list of MeasurementHasValues links to a Measurement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MeasurementHasValues> GetLinksToValues ( global::UPM.IoT_DSL_AF2.Measurement measurementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MeasurementHasValues>(measurementInstance, global::UPM.IoT_DSL_AF2.MeasurementHasValues.MeasurementDomainRoleId);
		}
		#endregion
		#region Values link accessor
		/// <summary>
		/// Get the MeasurementHasValues link to a Values.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MeasurementHasValues GetLinkToMeasurement (global::UPM.IoT_DSL_AF2.Values valuesInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MeasurementHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MeasurementHasValues>(valuesInstance, global::UPM.IoT_DSL_AF2.MeasurementHasValues.ValuesDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Values not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MeasurementHasValues instance accessors
		
		/// <summary>
		/// Get any MeasurementHasValues links between a given Measurement and a Values.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MeasurementHasValues> GetLinks( global::UPM.IoT_DSL_AF2.Measurement source, global::UPM.IoT_DSL_AF2.Values target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MeasurementHasValues> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MeasurementHasValues>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MeasurementHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MeasurementHasValues>(source, global::UPM.IoT_DSL_AF2.MeasurementHasValues.MeasurementDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MeasurementHasValues link in links )
			{
				if ( target.Equals(link.Values) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MeasurementHasValues link between a given Measurementand a Values.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MeasurementHasValues GetLink( global::UPM.IoT_DSL_AF2.Measurement source, global::UPM.IoT_DSL_AF2.Values target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MeasurementHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MeasurementHasValues>(source, global::UPM.IoT_DSL_AF2.MeasurementHasValues.MeasurementDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MeasurementHasValues link in links )
			{
				if ( target.Equals(link.Values) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship MyIoTDSLAF2ModelHasAction
	/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4056d386-d5cc-4710-b4fe-62e5dd89dfcb")]
	public partial class MyIoTDSLAF2ModelHasAction : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyIoTDSLAF2ModelHasAction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4056d386, 0xd5cc, 0x4710, 0xb4, 0xfe, 0x62, 0xe5, 0xdd, 0x89, 0xdf, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyIoTDSLAF2ModelHasAction link in the same Partition as the given MyIoTDSLAF2Model
		/// </summary>
		/// <param name="source">MyIoTDSLAF2Model to use as the source of the relationship.</param>
		/// <param name="target">Action to use as the target of the relationship.</param>
		public MyIoTDSLAF2ModelHasAction(MyIoTDSLAF2Model source, Action target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyIoTDSLAF2ModelHasAction.MyIoTDSLAF2ModelDomainRoleId, source), new DslModeling::RoleAssignment(MyIoTDSLAF2ModelHasAction.ActionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyIoTDSLAF2ModelHasAction(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyIoTDSLAF2ModelHasAction(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyIoTDSLAF2ModelHasAction(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyIoTDSLAF2ModelHasAction(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyIoTDSLAF2Model domain role code
		
		/// <summary>
		/// MyIoTDSLAF2Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyIoTDSLAF2ModelDomainRoleId = new global::System.Guid(0x657c8db9, 0x2060, 0x4174, 0xb6, 0x0e, 0x91, 0xe8, 0x64, 0x6e, 0xca, 0x31);
		
		/// <summary>
		/// DomainRole MyIoTDSLAF2Model
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.MyIoTDSLAF2Model
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction/MyIoTDSLAF2Model.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction/MyIoTDSLAF2Model.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Action", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction/MyIoTDSLAF2Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("657c8db9-2060-4174-b60e-91e8646eca31")]
		public virtual MyIoTDSLAF2Model MyIoTDSLAF2Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyIoTDSLAF2Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyIoTDSLAF2ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyIoTDSLAF2ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyIoTDSLAF2Model of a Action
		/// <summary>
		/// Gets MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MyIoTDSLAF2Model GetMyIoTDSLAF2Model(Action element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ActionDomainRoleId) as MyIoTDSLAF2Model;
		}
		
		/// <summary>
		/// Sets MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMyIoTDSLAF2Model(Action element, MyIoTDSLAF2Model newMyIoTDSLAF2Model)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ActionDomainRoleId, newMyIoTDSLAF2Model);
		}
		#endregion
		#region Action domain role code
		
		/// <summary>
		/// Action domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActionDomainRoleId = new global::System.Guid(0xd6182324, 0x21dc, 0x4ba8, 0xa3, 0xc1, 0x96, 0x82, 0x97, 0x24, 0xe5, 0x6f);
		
		/// <summary>
		/// DomainRole Action
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.Action
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction/Action.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction/Action.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyIoTDSLAF2Model", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction/Action.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d6182324-21dc-4ba8-a3c1-96829724e56f")]
		public virtual Action Action
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Action)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Action of a MyIoTDSLAF2Model
		/// <summary>
		/// Gets a list of Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Action> GetAction(MyIoTDSLAF2Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Action>, Action>(element, MyIoTDSLAF2ModelDomainRoleId);
		}
		#endregion
		#region MyIoTDSLAF2Model link accessor
		/// <summary>
		/// Get the list of MyIoTDSLAF2ModelHasAction links to a MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction> GetLinksToAction ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model myIoTDSLAF2ModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction>(myIoTDSLAF2ModelInstance, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.MyIoTDSLAF2ModelDomainRoleId);
		}
		#endregion
		#region Action link accessor
		/// <summary>
		/// Get the MyIoTDSLAF2ModelHasAction link to a Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction GetLinkToMyIoTDSLAF2Model (global::UPM.IoT_DSL_AF2.Action actionInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction>(actionInstance, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.ActionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Action not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MyIoTDSLAF2ModelHasAction instance accessors
		
		/// <summary>
		/// Get any MyIoTDSLAF2ModelHasAction links between a given MyIoTDSLAF2Model and a Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction> GetLinks( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model source, global::UPM.IoT_DSL_AF2.Action target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction>(source, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.MyIoTDSLAF2ModelDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction link in links )
			{
				if ( target.Equals(link.Action) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyIoTDSLAF2ModelHasAction link between a given MyIoTDSLAF2Modeland a Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction GetLink( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model source, global::UPM.IoT_DSL_AF2.Action target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction>(source, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction.MyIoTDSLAF2ModelDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAction link in links )
			{
				if ( target.Equals(link.Action) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship ActuatorPerformsAction
	/// Description for UPM.IoT_DSL_AF2.ActuatorPerformsAction
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ActuatorPerformsAction.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ActuatorPerformsAction.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b13fa182-2e05-4337-8704-85c060ac37ae")]
	public partial class ActuatorPerformsAction : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ActuatorPerformsAction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb13fa182, 0x2e05, 0x4337, 0x87, 0x04, 0x85, 0xc0, 0x60, 0xac, 0x37, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ActuatorPerformsAction link in the same Partition as the given Actuator
		/// </summary>
		/// <param name="source">Actuator to use as the source of the relationship.</param>
		/// <param name="target">Action to use as the target of the relationship.</param>
		public ActuatorPerformsAction(Actuator source, Action target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ActuatorPerformsAction.ActuatorDomainRoleId, source), new DslModeling::RoleAssignment(ActuatorPerformsAction.ActionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActuatorPerformsAction(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActuatorPerformsAction(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActuatorPerformsAction(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActuatorPerformsAction(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Actuator domain role code
		
		/// <summary>
		/// Actuator domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActuatorDomainRoleId = new global::System.Guid(0xf85232c0, 0x4db8, 0x4400, 0x80, 0xa4, 0xd4, 0xe2, 0x75, 0x54, 0xa7, 0x86);
		
		/// <summary>
		/// DomainRole Actuator
		/// Description for UPM.IoT_DSL_AF2.ActuatorPerformsAction.Actuator
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ActuatorPerformsAction/Actuator.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ActuatorPerformsAction/Actuator.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Action", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.ActuatorPerformsAction/Actuator.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("f85232c0-4db8-4400-80a4-d4e27554a786")]
		public virtual Actuator Actuator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actuator)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActuatorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActuatorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actuator of a Action
		/// <summary>
		/// Gets a list of Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Actuator> GetActuator(Action element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Actuator>, Actuator>(element, ActionDomainRoleId);
		}
		#endregion
		#region Action domain role code
		
		/// <summary>
		/// Action domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActionDomainRoleId = new global::System.Guid(0x6355f8a1, 0xf291, 0x4ec3, 0x9c, 0x17, 0xa5, 0x29, 0x99, 0xb4, 0xe6, 0xf4);
		
		/// <summary>
		/// DomainRole Action
		/// Description for UPM.IoT_DSL_AF2.ActuatorPerformsAction.Action
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ActuatorPerformsAction/Action.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ActuatorPerformsAction/Action.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Actuator", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.ActuatorPerformsAction/Action.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("6355f8a1-f291-4ec3-9c17-a52999b4e6f4")]
		public virtual Action Action
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Action)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Action of a Actuator
		/// <summary>
		/// Gets a list of Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Action> GetAction(Actuator element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Action>, Action>(element, ActuatorDomainRoleId);
		}
		#endregion
		#region Actuator link accessor
		/// <summary>
		/// Get the list of ActuatorPerformsAction links to a Actuator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction> GetLinksToAction ( global::UPM.IoT_DSL_AF2.Actuator actuatorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction>(actuatorInstance, global::UPM.IoT_DSL_AF2.ActuatorPerformsAction.ActuatorDomainRoleId);
		}
		#endregion
		#region Action link accessor
		/// <summary>
		/// Get the list of ActuatorPerformsAction links to a Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction> GetLinksToActuator ( global::UPM.IoT_DSL_AF2.Action actionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction>(actionInstance, global::UPM.IoT_DSL_AF2.ActuatorPerformsAction.ActionDomainRoleId);
		}
		#endregion
		#region ActuatorPerformsAction instance accessors
		
		/// <summary>
		/// Get any ActuatorPerformsAction links between a given Actuator and a Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction> GetLinks( global::UPM.IoT_DSL_AF2.Actuator source, global::UPM.IoT_DSL_AF2.Action target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction>(source, global::UPM.IoT_DSL_AF2.ActuatorPerformsAction.ActuatorDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.ActuatorPerformsAction link in links )
			{
				if ( target.Equals(link.Action) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ActuatorPerformsAction link between a given Actuatorand a Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.ActuatorPerformsAction GetLink( global::UPM.IoT_DSL_AF2.Actuator source, global::UPM.IoT_DSL_AF2.Action target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ActuatorPerformsAction>(source, global::UPM.IoT_DSL_AF2.ActuatorPerformsAction.ActuatorDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.ActuatorPerformsAction link in links )
			{
				if ( target.Equals(link.Action) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship MyIoTDSLAF2ModelHasAlarm
	/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f729d161-d97d-4234-ae42-909940c65522")]
	public partial class MyIoTDSLAF2ModelHasAlarm : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyIoTDSLAF2ModelHasAlarm domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf729d161, 0xd97d, 0x4234, 0xae, 0x42, 0x90, 0x99, 0x40, 0xc6, 0x55, 0x22);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyIoTDSLAF2ModelHasAlarm link in the same Partition as the given MyIoTDSLAF2Model
		/// </summary>
		/// <param name="source">MyIoTDSLAF2Model to use as the source of the relationship.</param>
		/// <param name="target">Alarm to use as the target of the relationship.</param>
		public MyIoTDSLAF2ModelHasAlarm(MyIoTDSLAF2Model source, Alarm target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyIoTDSLAF2ModelHasAlarm.MyIoTDSLAF2ModelDomainRoleId, source), new DslModeling::RoleAssignment(MyIoTDSLAF2ModelHasAlarm.AlarmDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyIoTDSLAF2ModelHasAlarm(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyIoTDSLAF2ModelHasAlarm(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyIoTDSLAF2ModelHasAlarm(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyIoTDSLAF2ModelHasAlarm(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyIoTDSLAF2Model domain role code
		
		/// <summary>
		/// MyIoTDSLAF2Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyIoTDSLAF2ModelDomainRoleId = new global::System.Guid(0x3d0ac42e, 0x48f8, 0x49d2, 0xb9, 0xff, 0x5c, 0xd3, 0x9b, 0xc8, 0xd6, 0xab);
		
		/// <summary>
		/// DomainRole MyIoTDSLAF2Model
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.MyIoTDSLAF2Model
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm/MyIoTDSLAF2Model.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm/MyIoTDSLAF2Model.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Alarm", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm/MyIoTDSLAF2Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3d0ac42e-48f8-49d2-b9ff-5cd39bc8d6ab")]
		public virtual MyIoTDSLAF2Model MyIoTDSLAF2Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyIoTDSLAF2Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyIoTDSLAF2ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyIoTDSLAF2ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyIoTDSLAF2Model of a Alarm
		/// <summary>
		/// Gets MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MyIoTDSLAF2Model GetMyIoTDSLAF2Model(Alarm element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AlarmDomainRoleId) as MyIoTDSLAF2Model;
		}
		
		/// <summary>
		/// Sets MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMyIoTDSLAF2Model(Alarm element, MyIoTDSLAF2Model newMyIoTDSLAF2Model)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AlarmDomainRoleId, newMyIoTDSLAF2Model);
		}
		#endregion
		#region Alarm domain role code
		
		/// <summary>
		/// Alarm domain role Id.
		/// </summary>
		public static readonly global::System.Guid AlarmDomainRoleId = new global::System.Guid(0x5a0f6bc6, 0xf763, 0x4e5a, 0xa8, 0x20, 0xbd, 0x69, 0xbf, 0x05, 0x31, 0x8d);
		
		/// <summary>
		/// DomainRole Alarm
		/// Description for UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.Alarm
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm/Alarm.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm/Alarm.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyIoTDSLAF2Model", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm/Alarm.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5a0f6bc6-f763-4e5a-a820-bd69bf05318d")]
		public virtual Alarm Alarm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Alarm)DslModeling::DomainRoleInfo.GetRolePlayer(this, AlarmDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AlarmDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Alarm of a MyIoTDSLAF2Model
		/// <summary>
		/// Gets a list of Alarm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Alarm> GetAlarm(MyIoTDSLAF2Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Alarm>, Alarm>(element, MyIoTDSLAF2ModelDomainRoleId);
		}
		#endregion
		#region MyIoTDSLAF2Model link accessor
		/// <summary>
		/// Get the list of MyIoTDSLAF2ModelHasAlarm links to a MyIoTDSLAF2Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm> GetLinksToAlarm ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model myIoTDSLAF2ModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm>(myIoTDSLAF2ModelInstance, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.MyIoTDSLAF2ModelDomainRoleId);
		}
		#endregion
		#region Alarm link accessor
		/// <summary>
		/// Get the MyIoTDSLAF2ModelHasAlarm link to a Alarm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm GetLinkToMyIoTDSLAF2Model (global::UPM.IoT_DSL_AF2.Alarm alarmInstance)
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm>(alarmInstance, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.AlarmDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Alarm not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MyIoTDSLAF2ModelHasAlarm instance accessors
		
		/// <summary>
		/// Get any MyIoTDSLAF2ModelHasAlarm links between a given MyIoTDSLAF2Model and a Alarm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm> GetLinks( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model source, global::UPM.IoT_DSL_AF2.Alarm target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm>(source, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.MyIoTDSLAF2ModelDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm link in links )
			{
				if ( target.Equals(link.Alarm) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyIoTDSLAF2ModelHasAlarm link between a given MyIoTDSLAF2Modeland a Alarm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm GetLink( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2Model source, global::UPM.IoT_DSL_AF2.Alarm target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm>(source, global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm.MyIoTDSLAF2ModelDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.MyIoTDSLAF2ModelHasAlarm link in links )
			{
				if ( target.Equals(link.Alarm) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM.IoT_DSL_AF2
{
	/// <summary>
	/// DomainRelationship ControllerTriggersAlarm
	/// Description for UPM.IoT_DSL_AF2.ControllerTriggersAlarm
	/// </summary>
	[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerTriggersAlarm.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerTriggersAlarm.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e6b0e168-84f5-423b-be7d-787706adebb3")]
	public partial class ControllerTriggersAlarm : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerTriggersAlarm domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe6b0e168, 0x84f5, 0x423b, 0xbe, 0x7d, 0x78, 0x77, 0x06, 0xad, 0xeb, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerTriggersAlarm link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">Alarm to use as the target of the relationship.</param>
		public ControllerTriggersAlarm(Controller source, Alarm target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerTriggersAlarm.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerTriggersAlarm.AlarmDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerTriggersAlarm(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerTriggersAlarm(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerTriggersAlarm(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerTriggersAlarm(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0xb2266bdb, 0x148c, 0x4e49, 0x97, 0x54, 0x77, 0xfa, 0xda, 0x13, 0xac, 0x6f);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for UPM.IoT_DSL_AF2.ControllerTriggersAlarm.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerTriggersAlarm/Controller.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerTriggersAlarm/Controller.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Alarm", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.ControllerTriggersAlarm/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b2266bdb-148c-4e49-9754-77fada13ac6f")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a Alarm
		/// <summary>
		/// Gets a list of Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Controller> GetController(Alarm element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(element, AlarmDomainRoleId);
		}
		#endregion
		#region Alarm domain role code
		
		/// <summary>
		/// Alarm domain role Id.
		/// </summary>
		public static readonly global::System.Guid AlarmDomainRoleId = new global::System.Guid(0x472940b3, 0x811b, 0x4c45, 0x82, 0x82, 0x57, 0xe4, 0x7e, 0xc0, 0x1e, 0x0e);
		
		/// <summary>
		/// DomainRole Alarm
		/// Description for UPM.IoT_DSL_AF2.ControllerTriggersAlarm.Alarm
		/// </summary>
		[DslDesign::DisplayNameResource("UPM.IoT_DSL_AF2.ControllerTriggersAlarm/Alarm.DisplayName", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM.IoT_DSL_AF2.ControllerTriggersAlarm/Alarm.Description", typeof(global::UPM.IoT_DSL_AF2.IoT_DSL_AF2DomainModel), "UPM.IoT_DSL_AF2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="UPM.IoT_DSL_AF2.ControllerTriggersAlarm/Alarm.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("472940b3-811b-4c45-8282-57e47ec01e0e")]
		public virtual Alarm Alarm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Alarm)DslModeling::DomainRoleInfo.GetRolePlayer(this, AlarmDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AlarmDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Alarm of a Controller
		/// <summary>
		/// Gets a list of Alarm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Alarm> GetAlarm(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Alarm>, Alarm>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerTriggersAlarm links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm> GetLinksToAlarm ( global::UPM.IoT_DSL_AF2.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm>(controllerInstance, global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm.ControllerDomainRoleId);
		}
		#endregion
		#region Alarm link accessor
		/// <summary>
		/// Get the list of ControllerTriggersAlarm links to a Alarm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm> GetLinksToController ( global::UPM.IoT_DSL_AF2.Alarm alarmInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm>(alarmInstance, global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm.AlarmDomainRoleId);
		}
		#endregion
		#region ControllerTriggersAlarm instance accessors
		
		/// <summary>
		/// Get any ControllerTriggersAlarm links between a given Controller and a Alarm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm> GetLinks( global::UPM.IoT_DSL_AF2.Controller source, global::UPM.IoT_DSL_AF2.Alarm target )
		{
			global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm> outLinks = new global::System.Collections.Generic.List<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm>();
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm>(source, global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm.ControllerDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm link in links )
			{
				if ( target.Equals(link.Alarm) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerTriggersAlarm link between a given Controllerand a Alarm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm GetLink( global::UPM.IoT_DSL_AF2.Controller source, global::UPM.IoT_DSL_AF2.Alarm target )
		{
			global::System.Collections.Generic.IList<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm>(source, global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm.ControllerDomainRoleId);
			foreach ( global::UPM.IoT_DSL_AF2.ControllerTriggersAlarm link in links )
			{
				if ( target.Equals(link.Alarm) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
